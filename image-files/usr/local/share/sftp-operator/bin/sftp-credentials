#!/usr/bin/env sh
#sftp-credentials

# enable call tracing
[[ -z "$TRACE" ]] || set -x

source /usr/local/share/sftp-operator/scripts/k8s-tools
source /usr/local/share/sftp-operator/scripts/k8s-deployment
source /usr/local/share/sftp-operator/scripts/base64
source /usr/local/share/sftp-operator/scripts/password-generator
source /usr/local/share/sftp-operator/scripts/ssh

# watch for annotated pods (sftp==enabled)
# check if pod
# if created:
# wait until pod is running (give up after some time)
# completely dereference owner
# safe owner of pod (for later deletion)
# create secret with
# - sftp-label (ownerReference)
# - username ( = namespace.owner-name )
# - password for sftp ( plain text )
# - empty authorized-keys ('')
# if deleted:
# check if owner has been deleted
# if owner has been deleted:
# remove secret
# if not just ignore

prepare() {
    
    download_host_keys
    create_host_keys
    upload_host_keys
    upload_ssh_config
    touch /pod-reference
}

add_secret() {
    local namespace="$1" pod="$2"
    deref="$namespace/$pod"
    dereference_owner "$namespace" v1 Pod "$pod" | while read namespace ownerApi ownerKind ownerName; do
        # check if pod was already recorded, skip if so
        grep -q "^$deref=$namespace $ownerKind $ownerName$" /pod-reference && continue
        # store dereferencing information
        echo "$deref=$namespace $ownerKind $ownerName" >> /pod-reference
        # cat <<EOF
        ownerUid="$(kubectl get "$ownerKind/$ownerName" --namespace="$namespace" --output=custom-columns=uid:metadata.uid --no-headers)"
        name="$(echo "sftp-$ownerKind-$ownerName" | tr '[:upper:]' '[:lower:]')"
        password="$(random_password)"
        kubectl get "secret/$name" --namespace="$namespace" --output=custom-columns=uid:metadata.uid >/dev/null 2>&1 && continue || true
        echo "create secret for $ownerKind $ownerName"
        kubectl create -f - <<EOF
kind: Secret
apiVersion: v1
metadata:
  name: $name
  namespace: $namespace
  labels:
    sftp-data: login-store
  ownerReferences:
    - apiVersion: $ownerApi
      kind: $ownerKind
      name: $ownerName
      controller: false
      uid: $ownerUid
data:
  password: $(base64_encode "$password")
  username: $(base64_encode "$namespace-$ownerName")
  key: $(base64_encode "$(ssh_keygen "ed25519" "$password")")
EOF
        break
    done
}

remove_secret() {
    local namespace="$1" pod="$2"
    # get old owner reference
    grep "^$namespace/$pod=" /pod-reference | cut -f2- -d= | while read namespace kind owner; do
        # break if owner is still present
        kubectl get "$kind/$owner" --namespace="$namespace" --no-headers >/dev/null 2>&1 && return || true

        echo "delete secret for $ownerKind $ownerName"

        # delete the secret
        kubectl delete "secrets/sftp-$kind-$owner" --namespace="$namespace"
    done
    # remove from dereference store
    sed "/^$namespace\/$pod=/d" -i /pod-reference
}

process_pod() {
    local namespace="$1" pod="$2" phase
    phase="$(kubectl "--namespace=$namespace" get pods/"$pod" --output=custom-columns=phase:status.phase --no-headers 2>/dev/null)"
    if [[ "$phase" = "Running" ]]; then
        add_secret "$namespace" "$pod"
    elif [[ "$phase" = "Pending" ]]; then
        return 0
    else
        remove_secret "$namespace" "$pod"
    fi
}

watch_pods() {
  kubectl get pods --watch --all-namespaces --selector=sftp==enabled --no-headers --output=custom-columns=namespace:metadata.namespace,name:metadata.name | while read namespace name; do
    process_pod "$namespace" "$name"
  done    
}

prepare
watch_pods